# Hacked containerfile that mashes up bluebuild w/ upstream template
# Mainly attempting to leverage some of the bluebuild tooling, while
# using a dnf5-centric approach until the tooling catches up
# Will likely need to be updated as bluebuild/upstream changes

# bluebuild: This stage is responsible for holding onto
# your config without copying it directly into
# the final image
FROM scratch AS stage-files
COPY ./files /files

# bluebuild: Copy modules
# The default modules are inside blue-build/modules
# Custom modules overwrite defaults
FROM scratch AS stage-modules
COPY --from=ghcr.io/blue-build/modules:latest /modules /modules
COPY ./modules /modules

# bluebuild: Bins to install
# These are basic tools that are added to all images.
# Generally used for the build process. We use a multi
# stage process so that adding the bins into the image
# can be added to the ostree commits.
FROM scratch AS stage-bins
COPY --from=gcr.io/projectsigstore/cosign /ko-app/cosign /bins/cosign
COPY --from=ghcr.io/blue-build/cli:latest-installer /out/bluebuild /bins/bluebuild

# bluebuild: Keys for pre-verified images
# Used to copy the keys into the final image
# and perform an ostree commit.
#
# Currently only holds the current image's
# public key.
FROM scratch AS stage-keys
COPY cosign.pub /keys/beardy-os.pub

# Base ublue image
FROM ghcr.io/ublue-os/base-main:latest

# bluebuild: args
ARG CONFIG_DIRECTORY="/tmp/files"
ARG FORCE_COLOR=1
ARG CLICOLOR_FORCE=1
ARG LANG="en_US.UTF-8"

ENV LANG $LANG

# bluebuild: script module (unwrap cli asap)
RUN \
--mount=type=bind,from=stage-files,src=/files,dst=/tmp/files,rw \
--mount=type=bind,from=stage-modules,src=/modules,dst=/tmp/modules,rw \
--mount=type=bind,from=ghcr.io/blue-build/cli/build-scripts:a8cac2adc90fa842e4565bc1825e588df4f5bcbd,src=/scripts/,dst=/tmp/scripts/ \
--mount=type=cache,dst=/var/cache/rpm-ostree,id=rpm-ostree-cache-beardy-os-latest,sharing=locked \
--mount=type=cache,dst=/var/cache/libdnf5,id=dnf-cache-beardy-os-latest,sharing=locked \
/tmp/scripts/run_module.sh 'script' '{"type":"script","scripts":["unwrap-cli.sh"]}' \
&& ostree container commit

# Install required packages
RUN \
--mount=type=cache,dst=/var/cache/rpm-ostree,id=rpm-ostree-cache-beardy-os-latest,sharing=locked \
--mount=type=cache,dst=/var/cache/libdnf5,id=dnf-cache-beardy-os-latest,sharing=locked \
dnf5 -y install glibc-locale-source glibc-langpack-en osbuild-selinux && \
dnf5 -y copr enable gmaglione/podman-bootc && \
dnf5 -y install podman-bootc && \
ostree container commit

RUN localedef -i en_US -f UTF-8 en_US.UTF-8
RUN echo "LANG=\"en_US.UTF-8\"" > /etc/locale.conf
RUN ln -s -f /usr/share/zoneinfo/America/New_York /etc/localtime
RUN echo "%wheel         ALL = (ALL) NOPASSWD: ALL" > /etc/sudoers.d/wheel-nopassword

# bluebuild: Key RUN
RUN --mount=type=bind,from=stage-keys,src=/keys,dst=/tmp/keys \
  mkdir -p /etc/pki/containers/ \
  mkdir -p /usr/etc/pki/containers/ \
  && cp /tmp/keys/* /etc/pki/containers/ \
  && cp /tmp/keys/* /usr/etc/pki/containers/ \
  && ostree container commit

# bluebuild: Bin RUN
RUN --mount=type=bind,from=stage-bins,src=/bins,dst=/tmp/bins \
  mkdir -p /usr/bin/ \
  && cp /tmp/bins/* /usr/bin/ \
  && ostree container commit

# TODO: skipped running pre_build.sh from bluebuild here, since it uses rpm-ostree instead of dnf5
# It only installs jq and does a commit, unsure if jq install is even necessary at this point

# bluebuild: bling module
# TODO: bling modules 1password, ublue-update, negativo17, and rpmfusion use rpm-ostree
# bling/dconf-update-service is safe, though (I think)
RUN \
--mount=type=bind,from=stage-files,src=/files,dst=/tmp/files,rw \
--mount=type=bind,from=stage-modules,src=/modules,dst=/tmp/modules,rw \
--mount=type=bind,from=ghcr.io/blue-build/cli/build-scripts:a8cac2adc90fa842e4565bc1825e588df4f5bcbd,src=/scripts/,dst=/tmp/scripts/ \
  --mount=type=cache,dst=/var/cache/rpm-ostree,id=rpm-ostree-cache-beardy-os-latest,sharing=locked \
  --mount=type=cache,dst=/var/cache/libdnf5,id=dnf-cache-beardy-os-latest,sharing=locked \
  /tmp/scripts/run_module.sh 'bling' '{"type":"bling","install":["dconf-update-service"]}' \  && ostree container commit

# Install additional packages
RUN \
--mount=type=cache,dst=/var/cache/rpm-ostree,id=rpm-ostree-cache-beardy-os-latest,sharing=locked \
--mount=type=cache,dst=/var/cache/libdnf5,id=dnf-cache-beardy-os-latest,sharing=locked \
dnf5 -y install \
cockpit-bridge \
cockpit-machines \
cockpit-navigator \
cockpit-networkmanager \
cockpit-ostree \
cockpit-podman \
cockpit-selinux \
cockpit-storaged \
cockpit-system \
cockpit-composer \
podman-compose \
libvirt-client \
virt-install \
btrfs-assistant \
btrfsmaintenance \
dbus-daemon \
dbus-tools \
fastfetch \
ptyxis \
setroubleshoot-plugins \
setroubleshoot-server \
usermode \
virt-install \
virt-manager \
virt-what \
xdg-user-dirs \
xdg-user-dirs-gtk \
tig \
libguestfs \
lorax \
&& ostree container commit

# TODO: ublue-update

# bluebuild: files module
RUN \
--mount=type=bind,from=stage-files,src=/files,dst=/tmp/files,rw \
--mount=type=bind,from=stage-modules,src=/modules,dst=/tmp/modules,rw \
--mount=type=bind,from=ghcr.io/blue-build/cli/build-scripts:a8cac2adc90fa842e4565bc1825e588df4f5bcbd,src=/scripts/,dst=/tmp/scripts/ \
  --mount=type=cache,dst=/var/cache/rpm-ostree,id=rpm-ostree-cache-beardy-os-latest,sharing=locked \
  --mount=type=cache,dst=/var/cache/libdnf5,id=dnf-cache-beardy-os-latest,sharing=locked \
  /tmp/scripts/run_module.sh 'files' '{"type":"files","files":[{"source":"system/common","destination":"/"}]}' \
  && ostree container commit

# bluebuild: default_flatpacks module
RUN \
--mount=type=bind,from=stage-files,src=/files,dst=/tmp/files,rw \
--mount=type=bind,from=stage-modules,src=/modules,dst=/tmp/modules,rw \
--mount=type=bind,from=ghcr.io/blue-build/cli/build-scripts:a8cac2adc90fa842e4565bc1825e588df4f5bcbd,src=/scripts/,dst=/tmp/scripts/ \
  --mount=type=cache,dst=/var/cache/rpm-ostree,id=rpm-ostree-cache-beardy-os-latest,sharing=locked \
  --mount=type=cache,dst=/var/cache/libdnf5,id=dnf-cache-beardy-os-latest,sharing=locked \
  /tmp/scripts/run_module.sh 'default-flatpaks' '{"type":"default-flatpaks","notify":true,"system":{"install":["com.github.tchx84.Flatseal","com.google.Chrome","com.mattjakeman.ExtensionManager","com.valvesoftware.Steam","com.valvesoftware.SteamLink","io.github.dvlv.boxbuddyrs","io.github.flattool.Warehouse","io.github.pwr_solaar.solaar","io.missioncenter.MissionCenter","io.podman_desktop.PodmanDesktop","org.cockpit_project.CockpitClient","org.fedoraproject.MediaWriter"],"remove":["org.gnome.eog"]},"user":{}}' \
  && ostree container commit

# bluebuild: systemd module
RUN \
--mount=type=bind,from=stage-files,src=/files,dst=/tmp/files,rw \
--mount=type=bind,from=stage-modules,src=/modules,dst=/tmp/modules,rw \
--mount=type=bind,from=ghcr.io/blue-build/cli/build-scripts:a8cac2adc90fa842e4565bc1825e588df4f5bcbd,src=/scripts/,dst=/tmp/scripts/ \
  --mount=type=cache,dst=/var/cache/rpm-ostree,id=rpm-ostree-cache-beardy-os-latest,sharing=locked \
  --mount=type=cache,dst=/var/cache/libdnf5,id=dnf-cache-beardy-os-latest,sharing=locked \
  /tmp/scripts/run_module.sh 'systemd' '{"type":"systemd","system":{"enabled":["podman.socket","sshd.service"]}}' \
  && ostree container commit

RUN bootc container lint

# # bluebuild: post_build.sh clears out /tmp/* and /var/* and does a commit
# RUN --mount=type=bind,from=ghcr.io/blue-build/cli/build-scripts:a8cac2adc90fa842e4565bc1825e588df4f5bcbd,src=/scripts/,dst=/scripts/ \
#   /scripts/post_build.sh

# ## Install applications
# # Anything in Fedora

# RUN dnf5 install vlc

## Add COPRs
# RUN dnf copr enable (copr-author/name)
# RUN dnf5 install thing-from-copr

## Manage services
# systemctl enable foo.service

# TODO: figure out why this needs to be created manually...
# fixes systemd tainted with 'var-run-bad'
# TODO: remove after sorting out issues with ro filesystem and systemd-tmpfiles failing to create necessary symlinks
# RUN ln -s /run /var/run && ostree container commit

# TODO: re-enable signing
# bluebuild: signing module
# RUN \
# --mount=type=bind,from=stage-files,src=/files,dst=/tmp/files,rw \
# --mount=type=bind,from=stage-modules,src=/modules,dst=/tmp/modules,rw \
# --mount=type=bind,from=ghcr.io/blue-build/cli/build-scripts:a8cac2adc90fa842e4565bc1825e588df4f5bcbd,src=/scripts/,dst=/tmp/scripts/ \
# --mount=type=cache,dst=/var/cache/rpm-ostree,id=rpm-ostree-cache-beardy-os-latest,sharing=locked \
# --mount=type=cache,dst=/var/cache/libdnf5,id=dnf-cache-beardy-os-latest,sharing=locked \
# /tmp/scripts/run_module.sh 'signing' '{"type":"signing"}' \
# && ostree container commit

# bluebuild: Labels are added last since they cause cache misses with buildah
LABEL org.blue-build.build-id="c74bf003-e98a-4ac0-8db2-8869239c6c13"
LABEL org.opencontainers.image.title="beardy-os"
LABEL org.opencontainers.image.description="The preferred u-blue based OS for bearded developers."
LABEL org.opencontainers.image.base.digest="sha256:4ff605c93dca3a99b434f7363f400925685432cc22c5affbef9567e97d49603d"
LABEL org.opencontainers.image.base.name="ghcr.io/ublue-os/silverblue-main:latest"
LABEL org.opencontainers.image.created="2024-12-10T01:22:13.918756743+00:00"
LABEL io.artifacthub.package.readme-url=https://raw.githubusercontent.com/detiber/beardy-os/main/README.md
LABEL org.opencontainers.image.source=https://github.com/detiber/beardy-os
LABEL org.opencontainers.image.url=https://github.com/detiber/beardy-os
LABEL org.opencontainers.image.vendor=detiber
